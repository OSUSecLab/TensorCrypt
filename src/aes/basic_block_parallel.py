#!/usr/bin/env python
# encoding: utf-8

import tensorflow as tf
import time
import numpy as np
from test_vectors import text2vector, get_vectors

model_path = "YOUR_PATH"

def key_expansion(key, nr=10):
    # nk, nb = 4, 4
    # nr = 10
    # rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    #         0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    #         0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    #         0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39]
    rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212,
            179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58,
            116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151,
            53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204,
            131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188,
            99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148,
            51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154,
            47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159,
            37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216,
            171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189,
            97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141]

    sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ]

    round_keys = []
    for i in range(16):
        if i % 4 == 0:
            round_keys.append([key[i]])
        else:
            round_keys[i // 4].append(key[i])
    # print round_keys

    for i in range(4, 4 * (nr+1)):
        round_keys.append([])
        if i % 4 == 0:
            byte = round_keys[i - 4][0] \
                   ^ sbox[round_keys[i - 1][1]] \
                   ^ rcon[i // 4]
            round_keys[i].append(byte)

            for j in range(1, 4):
                byte = round_keys[i - 4][j] \
                       ^ sbox[round_keys[i - 1][(j + 1) % 4]]
                round_keys[i].append(byte)
        else:
            for j in range(4):
                byte = round_keys[i - 4][j] \
                       ^ round_keys[i - 1][j]
                round_keys[i].append(byte)
    result = []
    for key in round_keys:
        result += key
    # return round_keys
    return result

def encrypt(plaintext, round_key):
    Nr = 10
    sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ]

    # gf_mul = [
    #   [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], [ 0x02, 0x03, 0x09, 0x0b, 0x0d, 0x0e ],
    #   [ 0x04, 0x06, 0x12, 0x16, 0x1a, 0x1c ], [ 0x06, 0x05, 0x1b, 0x1d, 0x17, 0x12 ],
    #   [ 0x08, 0x0c, 0x24, 0x2c, 0x34, 0x38 ], [ 0x0a, 0x0f, 0x2d, 0x27, 0x39, 0x36 ],
    #   [ 0x0c, 0x0a, 0x36, 0x3a, 0x2e, 0x24 ], [ 0x0e, 0x09, 0x3f, 0x31, 0x23, 0x2a ],
    #   [ 0x10, 0x18, 0x48, 0x58, 0x68, 0x70 ], [ 0x12, 0x1b, 0x41, 0x53, 0x65, 0x7e ],
    #   [ 0x14, 0x1e, 0x5a, 0x4e, 0x72, 0x6c ], [ 0x16, 0x1d, 0x53, 0x45, 0x7f, 0x62 ],
    #   [ 0x18, 0x14, 0x6c, 0x74, 0x5c, 0x48 ], [ 0x1a, 0x17, 0x65, 0x7f, 0x51, 0x46 ],
    #   [ 0x1c, 0x12, 0x7e, 0x62, 0x46, 0x54 ], [ 0x1e, 0x11, 0x77, 0x69, 0x4b, 0x5a ],
    #   [ 0x20, 0x30, 0x90, 0xb0, 0xd0, 0xe0 ], [ 0x22, 0x33, 0x99, 0xbb, 0xdd, 0xee ],
    #   [ 0x24, 0x36, 0x82, 0xa6, 0xca, 0xfc ], [ 0x26, 0x35, 0x8b, 0xad, 0xc7, 0xf2 ],
    #   [ 0x28, 0x3c, 0xb4, 0x9c, 0xe4, 0xd8 ], [ 0x2a, 0x3f, 0xbd, 0x97, 0xe9, 0xd6 ],
    #   [ 0x2c, 0x3a, 0xa6, 0x8a, 0xfe, 0xc4 ], [ 0x2e, 0x39, 0xaf, 0x81, 0xf3, 0xca ],
    #   [ 0x30, 0x28, 0xd8, 0xe8, 0xb8, 0x90 ], [ 0x32, 0x2b, 0xd1, 0xe3, 0xb5, 0x9e ],
    #   [ 0x34, 0x2e, 0xca, 0xfe, 0xa2, 0x8c ], [ 0x36, 0x2d, 0xc3, 0xf5, 0xaf, 0x82 ],
    #   [ 0x38, 0x24, 0xfc, 0xc4, 0x8c, 0xa8 ], [ 0x3a, 0x27, 0xf5, 0xcf, 0x81, 0xa6 ],
    #   [ 0x3c, 0x22, 0xee, 0xd2, 0x96, 0xb4 ], [ 0x3e, 0x21, 0xe7, 0xd9, 0x9b, 0xba ],
    #   [ 0x40, 0x60, 0x3b, 0x7b, 0xbb, 0xdb ], [ 0x42, 0x63, 0x32, 0x70, 0xb6, 0xd5 ],
    #   [ 0x44, 0x66, 0x29, 0x6d, 0xa1, 0xc7 ], [ 0x46, 0x65, 0x20, 0x66, 0xac, 0xc9 ],
    #   [ 0x48, 0x6c, 0x1f, 0x57, 0x8f, 0xe3 ], [ 0x4a, 0x6f, 0x16, 0x5c, 0x82, 0xed ],
    #   [ 0x4c, 0x6a, 0x0d, 0x41, 0x95, 0xff ], [ 0x4e, 0x69, 0x04, 0x4a, 0x98, 0xf1 ],
    #   [ 0x50, 0x78, 0x73, 0x23, 0xd3, 0xab ], [ 0x52, 0x7b, 0x7a, 0x28, 0xde, 0xa5 ],
    #   [ 0x54, 0x7e, 0x61, 0x35, 0xc9, 0xb7 ], [ 0x56, 0x7d, 0x68, 0x3e, 0xc4, 0xb9 ],
    #   [ 0x58, 0x74, 0x57, 0x0f, 0xe7, 0x93 ], [ 0x5a, 0x77, 0x5e, 0x04, 0xea, 0x9d ],
    #   [ 0x5c, 0x72, 0x45, 0x19, 0xfd, 0x8f ], [ 0x5e, 0x71, 0x4c, 0x12, 0xf0, 0x81 ],
    #   [ 0x60, 0x50, 0xab, 0xcb, 0x6b, 0x3b ], [ 0x62, 0x53, 0xa2, 0xc0, 0x66, 0x35 ],
    #   [ 0x64, 0x56, 0xb9, 0xdd, 0x71, 0x27 ], [ 0x66, 0x55, 0xb0, 0xd6, 0x7c, 0x29 ],
    #   [ 0x68, 0x5c, 0x8f, 0xe7, 0x5f, 0x03 ], [ 0x6a, 0x5f, 0x86, 0xec, 0x52, 0x0d ],
    #   [ 0x6c, 0x5a, 0x9d, 0xf1, 0x45, 0x1f ], [ 0x6e, 0x59, 0x94, 0xfa, 0x48, 0x11 ],
    #   [ 0x70, 0x48, 0xe3, 0x93, 0x03, 0x4b ], [ 0x72, 0x4b, 0xea, 0x98, 0x0e, 0x45 ],
    #   [ 0x74, 0x4e, 0xf1, 0x85, 0x19, 0x57 ], [ 0x76, 0x4d, 0xf8, 0x8e, 0x14, 0x59 ],
    #   [ 0x78, 0x44, 0xc7, 0xbf, 0x37, 0x73 ], [ 0x7a, 0x47, 0xce, 0xb4, 0x3a, 0x7d ],
    #   [ 0x7c, 0x42, 0xd5, 0xa9, 0x2d, 0x6f ], [ 0x7e, 0x41, 0xdc, 0xa2, 0x20, 0x61 ],
    #   [ 0x80, 0xc0, 0x76, 0xf6, 0x6d, 0xad ], [ 0x82, 0xc3, 0x7f, 0xfd, 0x60, 0xa3 ],
    #   [ 0x84, 0xc6, 0x64, 0xe0, 0x77, 0xb1 ], [ 0x86, 0xc5, 0x6d, 0xeb, 0x7a, 0xbf ],
    #   [ 0x88, 0xcc, 0x52, 0xda, 0x59, 0x95 ], [ 0x8a, 0xcf, 0x5b, 0xd1, 0x54, 0x9b ],
    #   [ 0x8c, 0xca, 0x40, 0xcc, 0x43, 0x89 ], [ 0x8e, 0xc9, 0x49, 0xc7, 0x4e, 0x87 ],
    #   [ 0x90, 0xd8, 0x3e, 0xae, 0x05, 0xdd ], [ 0x92, 0xdb, 0x37, 0xa5, 0x08, 0xd3 ],
    #   [ 0x94, 0xde, 0x2c, 0xb8, 0x1f, 0xc1 ], [ 0x96, 0xdd, 0x25, 0xb3, 0x12, 0xcf ],
    #   [ 0x98, 0xd4, 0x1a, 0x82, 0x31, 0xe5 ], [ 0x9a, 0xd7, 0x13, 0x89, 0x3c, 0xeb ],
    #   [ 0x9c, 0xd2, 0x08, 0x94, 0x2b, 0xf9 ], [ 0x9e, 0xd1, 0x01, 0x9f, 0x26, 0xf7 ],
    #   [ 0xa0, 0xf0, 0xe6, 0x46, 0xbd, 0x4d ], [ 0xa2, 0xf3, 0xef, 0x4d, 0xb0, 0x43 ],
    #   [ 0xa4, 0xf6, 0xf4, 0x50, 0xa7, 0x51 ], [ 0xa6, 0xf5, 0xfd, 0x5b, 0xaa, 0x5f ],
    #   [ 0xa8, 0xfc, 0xc2, 0x6a, 0x89, 0x75 ], [ 0xaa, 0xff, 0xcb, 0x61, 0x84, 0x7b ],
    #   [ 0xac, 0xfa, 0xd0, 0x7c, 0x93, 0x69 ], [ 0xae, 0xf9, 0xd9, 0x77, 0x9e, 0x67 ],
    #   [ 0xb0, 0xe8, 0xae, 0x1e, 0xd5, 0x3d ], [ 0xb2, 0xeb, 0xa7, 0x15, 0xd8, 0x33 ],
    #   [ 0xb4, 0xee, 0xbc, 0x08, 0xcf, 0x21 ], [ 0xb6, 0xed, 0xb5, 0x03, 0xc2, 0x2f ],
    #   [ 0xb8, 0xe4, 0x8a, 0x32, 0xe1, 0x05 ], [ 0xba, 0xe7, 0x83, 0x39, 0xec, 0x0b ],
    #   [ 0xbc, 0xe2, 0x98, 0x24, 0xfb, 0x19 ], [ 0xbe, 0xe1, 0x91, 0x2f, 0xf6, 0x17 ],
    #   [ 0xc0, 0xa0, 0x4d, 0x8d, 0xd6, 0x76 ], [ 0xc2, 0xa3, 0x44, 0x86, 0xdb, 0x78 ],
    #   [ 0xc4, 0xa6, 0x5f, 0x9b, 0xcc, 0x6a ], [ 0xc6, 0xa5, 0x56, 0x90, 0xc1, 0x64 ],
    #   [ 0xc8, 0xac, 0x69, 0xa1, 0xe2, 0x4e ], [ 0xca, 0xaf, 0x60, 0xaa, 0xef, 0x40 ],
    #   [ 0xcc, 0xaa, 0x7b, 0xb7, 0xf8, 0x52 ], [ 0xce, 0xa9, 0x72, 0xbc, 0xf5, 0x5c ],
    #   [ 0xd0, 0xb8, 0x05, 0xd5, 0xbe, 0x06 ], [ 0xd2, 0xbb, 0x0c, 0xde, 0xb3, 0x08 ],
    #   [ 0xd4, 0xbe, 0x17, 0xc3, 0xa4, 0x1a ], [ 0xd6, 0xbd, 0x1e, 0xc8, 0xa9, 0x14 ],
    #   [ 0xd8, 0xb4, 0x21, 0xf9, 0x8a, 0x3e ], [ 0xda, 0xb7, 0x28, 0xf2, 0x87, 0x30 ],
    #   [ 0xdc, 0xb2, 0x33, 0xef, 0x90, 0x22 ], [ 0xde, 0xb1, 0x3a, 0xe4, 0x9d, 0x2c ],
    #   [ 0xe0, 0x90, 0xdd, 0x3d, 0x06, 0x96 ], [ 0xe2, 0x93, 0xd4, 0x36, 0x0b, 0x98 ],
    #   [ 0xe4, 0x96, 0xcf, 0x2b, 0x1c, 0x8a ], [ 0xe6, 0x95, 0xc6, 0x20, 0x11, 0x84 ],
    #   [ 0xe8, 0x9c, 0xf9, 0x11, 0x32, 0xae ], [ 0xea, 0x9f, 0xf0, 0x1a, 0x3f, 0xa0 ],
    #   [ 0xec, 0x9a, 0xeb, 0x07, 0x28, 0xb2 ], [ 0xee, 0x99, 0xe2, 0x0c, 0x25, 0xbc ],
    #   [ 0xf0, 0x88, 0x95, 0x65, 0x6e, 0xe6 ], [ 0xf2, 0x8b, 0x9c, 0x6e, 0x63, 0xe8 ],
    #   [ 0xf4, 0x8e, 0x87, 0x73, 0x74, 0xfa ], [ 0xf6, 0x8d, 0x8e, 0x78, 0x79, 0xf4 ],
    #   [ 0xf8, 0x84, 0xb1, 0x49, 0x5a, 0xde ], [ 0xfa, 0x87, 0xb8, 0x42, 0x57, 0xd0 ],
    #   [ 0xfc, 0x82, 0xa3, 0x5f, 0x40, 0xc2 ], [ 0xfe, 0x81, 0xaa, 0x54, 0x4d, 0xcc ],
    #   [ 0x1b, 0x9b, 0xec, 0xf7, 0xda, 0x41 ], [ 0x19, 0x98, 0xe5, 0xfc, 0xd7, 0x4f ],
    #   [ 0x1f, 0x9d, 0xfe, 0xe1, 0xc0, 0x5d ], [ 0x1d, 0x9e, 0xf7, 0xea, 0xcd, 0x53 ],
    #   [ 0x13, 0x97, 0xc8, 0xdb, 0xee, 0x79 ], [ 0x11, 0x94, 0xc1, 0xd0, 0xe3, 0x77 ],
    #   [ 0x17, 0x91, 0xda, 0xcd, 0xf4, 0x65 ], [ 0x15, 0x92, 0xd3, 0xc6, 0xf9, 0x6b ],
    #   [ 0x0b, 0x83, 0xa4, 0xaf, 0xb2, 0x31 ], [ 0x09, 0x80, 0xad, 0xa4, 0xbf, 0x3f ],
    #   [ 0x0f, 0x85, 0xb6, 0xb9, 0xa8, 0x2d ], [ 0x0d, 0x86, 0xbf, 0xb2, 0xa5, 0x23 ],
    #   [ 0x03, 0x8f, 0x80, 0x83, 0x86, 0x09 ], [ 0x01, 0x8c, 0x89, 0x88, 0x8b, 0x07 ],
    #   [ 0x07, 0x89, 0x92, 0x95, 0x9c, 0x15 ], [ 0x05, 0x8a, 0x9b, 0x9e, 0x91, 0x1b ],
    #   [ 0x3b, 0xab, 0x7c, 0x47, 0x0a, 0xa1 ], [ 0x39, 0xa8, 0x75, 0x4c, 0x07, 0xaf ],
    #   [ 0x3f, 0xad, 0x6e, 0x51, 0x10, 0xbd ], [ 0x3d, 0xae, 0x67, 0x5a, 0x1d, 0xb3 ],
    #   [ 0x33, 0xa7, 0x58, 0x6b, 0x3e, 0x99 ], [ 0x31, 0xa4, 0x51, 0x60, 0x33, 0x97 ],
    #   [ 0x37, 0xa1, 0x4a, 0x7d, 0x24, 0x85 ], [ 0x35, 0xa2, 0x43, 0x76, 0x29, 0x8b ],
    #   [ 0x2b, 0xb3, 0x34, 0x1f, 0x62, 0xd1 ], [ 0x29, 0xb0, 0x3d, 0x14, 0x6f, 0xdf ],
    #   [ 0x2f, 0xb5, 0x26, 0x09, 0x78, 0xcd ], [ 0x2d, 0xb6, 0x2f, 0x02, 0x75, 0xc3 ],
    #   [ 0x23, 0xbf, 0x10, 0x33, 0x56, 0xe9 ], [ 0x21, 0xbc, 0x19, 0x38, 0x5b, 0xe7 ],
    #   [ 0x27, 0xb9, 0x02, 0x25, 0x4c, 0xf5 ], [ 0x25, 0xba, 0x0b, 0x2e, 0x41, 0xfb ],
    #   [ 0x5b, 0xfb, 0xd7, 0x8c, 0x61, 0x9a ], [ 0x59, 0xf8, 0xde, 0x87, 0x6c, 0x94 ],
    #   [ 0x5f, 0xfd, 0xc5, 0x9a, 0x7b, 0x86 ], [ 0x5d, 0xfe, 0xcc, 0x91, 0x76, 0x88 ],
    #   [ 0x53, 0xf7, 0xf3, 0xa0, 0x55, 0xa2 ], [ 0x51, 0xf4, 0xfa, 0xab, 0x58, 0xac ],
    #   [ 0x57, 0xf1, 0xe1, 0xb6, 0x4f, 0xbe ], [ 0x55, 0xf2, 0xe8, 0xbd, 0x42, 0xb0 ],
    #   [ 0x4b, 0xe3, 0x9f, 0xd4, 0x09, 0xea ], [ 0x49, 0xe0, 0x96, 0xdf, 0x04, 0xe4 ],
    #   [ 0x4f, 0xe5, 0x8d, 0xc2, 0x13, 0xf6 ], [ 0x4d, 0xe6, 0x84, 0xc9, 0x1e, 0xf8 ],
    #   [ 0x43, 0xef, 0xbb, 0xf8, 0x3d, 0xd2 ], [ 0x41, 0xec, 0xb2, 0xf3, 0x30, 0xdc ],
    #   [ 0x47, 0xe9, 0xa9, 0xee, 0x27, 0xce ], [ 0x45, 0xea, 0xa0, 0xe5, 0x2a, 0xc0 ],
    #   [ 0x7b, 0xcb, 0x47, 0x3c, 0xb1, 0x7a ], [ 0x79, 0xc8, 0x4e, 0x37, 0xbc, 0x74 ],
    #   [ 0x7f, 0xcd, 0x55, 0x2a, 0xab, 0x66 ], [ 0x7d, 0xce, 0x5c, 0x21, 0xa6, 0x68 ],
    #   [ 0x73, 0xc7, 0x63, 0x10, 0x85, 0x42 ], [ 0x71, 0xc4, 0x6a, 0x1b, 0x88, 0x4c ],
    #   [ 0x77, 0xc1, 0x71, 0x06, 0x9f, 0x5e ], [ 0x75, 0xc2, 0x78, 0x0d, 0x92, 0x50 ],
    #   [ 0x6b, 0xd3, 0x0f, 0x64, 0xd9, 0x0a ], [ 0x69, 0xd0, 0x06, 0x6f, 0xd4, 0x04 ],
    #   [ 0x6f, 0xd5, 0x1d, 0x72, 0xc3, 0x16 ], [ 0x6d, 0xd6, 0x14, 0x79, 0xce, 0x18 ],
    #   [ 0x63, 0xdf, 0x2b, 0x48, 0xed, 0x32 ], [ 0x61, 0xdc, 0x22, 0x43, 0xe0, 0x3c ],
    #   [ 0x67, 0xd9, 0x39, 0x5e, 0xf7, 0x2e ], [ 0x65, 0xda, 0x30, 0x55, 0xfa, 0x20 ],
    #   [ 0x9b, 0x5b, 0x9a, 0x01, 0xb7, 0xec ], [ 0x99, 0x58, 0x93, 0x0a, 0xba, 0xe2 ],
    #   [ 0x9f, 0x5d, 0x88, 0x17, 0xad, 0xf0 ], [ 0x9d, 0x5e, 0x81, 0x1c, 0xa0, 0xfe ],
    #   [ 0x93, 0x57, 0xbe, 0x2d, 0x83, 0xd4 ], [ 0x91, 0x54, 0xb7, 0x26, 0x8e, 0xda ],
    #   [ 0x97, 0x51, 0xac, 0x3b, 0x99, 0xc8 ], [ 0x95, 0x52, 0xa5, 0x30, 0x94, 0xc6 ],
    #   [ 0x8b, 0x43, 0xd2, 0x59, 0xdf, 0x9c ], [ 0x89, 0x40, 0xdb, 0x52, 0xd2, 0x92 ],
    #   [ 0x8f, 0x45, 0xc0, 0x4f, 0xc5, 0x80 ], [ 0x8d, 0x46, 0xc9, 0x44, 0xc8, 0x8e ],
    #   [ 0x83, 0x4f, 0xf6, 0x75, 0xeb, 0xa4 ], [ 0x81, 0x4c, 0xff, 0x7e, 0xe6, 0xaa ],
    #   [ 0x87, 0x49, 0xe4, 0x63, 0xf1, 0xb8 ], [ 0x85, 0x4a, 0xed, 0x68, 0xfc, 0xb6 ],
    #   [ 0xbb, 0x6b, 0x0a, 0xb1, 0x67, 0x0c ], [ 0xb9, 0x68, 0x03, 0xba, 0x6a, 0x02 ],
    #   [ 0xbf, 0x6d, 0x18, 0xa7, 0x7d, 0x10 ], [ 0xbd, 0x6e, 0x11, 0xac, 0x70, 0x1e ],
    #   [ 0xb3, 0x67, 0x2e, 0x9d, 0x53, 0x34 ], [ 0xb1, 0x64, 0x27, 0x96, 0x5e, 0x3a ],
    #   [ 0xb7, 0x61, 0x3c, 0x8b, 0x49, 0x28 ], [ 0xb5, 0x62, 0x35, 0x80, 0x44, 0x26 ],
    #   [ 0xab, 0x73, 0x42, 0xe9, 0x0f, 0x7c ], [ 0xa9, 0x70, 0x4b, 0xe2, 0x02, 0x72 ],
    #   [ 0xaf, 0x75, 0x50, 0xff, 0x15, 0x60 ], [ 0xad, 0x76, 0x59, 0xf4, 0x18, 0x6e ],
    #   [ 0xa3, 0x7f, 0x66, 0xc5, 0x3b, 0x44 ], [ 0xa1, 0x7c, 0x6f, 0xce, 0x36, 0x4a ],
    #   [ 0xa7, 0x79, 0x74, 0xd3, 0x21, 0x58 ], [ 0xa5, 0x7a, 0x7d, 0xd8, 0x2c, 0x56 ],
    #   [ 0xdb, 0x3b, 0xa1, 0x7a, 0x0c, 0x37 ], [ 0xd9, 0x38, 0xa8, 0x71, 0x01, 0x39 ],
    #   [ 0xdf, 0x3d, 0xb3, 0x6c, 0x16, 0x2b ], [ 0xdd, 0x3e, 0xba, 0x67, 0x1b, 0x25 ],
    #   [ 0xd3, 0x37, 0x85, 0x56, 0x38, 0x0f ], [ 0xd1, 0x34, 0x8c, 0x5d, 0x35, 0x01 ],
    #   [ 0xd7, 0x31, 0x97, 0x40, 0x22, 0x13 ], [ 0xd5, 0x32, 0x9e, 0x4b, 0x2f, 0x1d ],
    #   [ 0xcb, 0x23, 0xe9, 0x22, 0x64, 0x47 ], [ 0xc9, 0x20, 0xe0, 0x29, 0x69, 0x49 ],
    #   [ 0xcf, 0x25, 0xfb, 0x34, 0x7e, 0x5b ], [ 0xcd, 0x26, 0xf2, 0x3f, 0x73, 0x55 ],
    #   [ 0xc3, 0x2f, 0xcd, 0x0e, 0x50, 0x7f ], [ 0xc1, 0x2c, 0xc4, 0x05, 0x5d, 0x71 ],
    #   [ 0xc7, 0x29, 0xdf, 0x18, 0x4a, 0x63 ], [ 0xc5, 0x2a, 0xd6, 0x13, 0x47, 0x6d ],
    #   [ 0xfb, 0x0b, 0x31, 0xca, 0xdc, 0xd7 ], [ 0xf9, 0x08, 0x38, 0xc1, 0xd1, 0xd9 ],
    #   [ 0xff, 0x0d, 0x23, 0xdc, 0xc6, 0xcb ], [ 0xfd, 0x0e, 0x2a, 0xd7, 0xcb, 0xc5 ],
    #   [ 0xf3, 0x07, 0x15, 0xe6, 0xe8, 0xef ], [ 0xf1, 0x04, 0x1c, 0xed, 0xe5, 0xe1 ],
    #   [ 0xf7, 0x01, 0x07, 0xf0, 0xf2, 0xf3 ], [ 0xf5, 0x02, 0x0e, 0xfb, 0xff, 0xfd ],
    #   [ 0xeb, 0x13, 0x79, 0x92, 0xb4, 0xa7 ], [ 0xe9, 0x10, 0x70, 0x99, 0xb9, 0xa9 ],
    #   [ 0xef, 0x15, 0x6b, 0x84, 0xae, 0xbb ], [ 0xed, 0x16, 0x62, 0x8f, 0xa3, 0xb5 ],
    #   [ 0xe3, 0x1f, 0x5d, 0xbe, 0x80, 0x9f ], [ 0xe1, 0x1c, 0x54, 0xb5, 0x8d, 0x91 ],
    #   [ 0xe7, 0x19, 0x4f, 0xa8, 0x9a, 0x83 ], [ 0xe5, 0x1a, 0x46, 0xa3, 0x97, 0x8d ]
    # ]

    gf_mul0 = [ 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
                0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
                0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
                0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
                0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
                0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
                0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
                0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
                0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
                0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
                0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
                0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
                0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
                0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
                0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
                0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5,
    ]

    gf_mul1 = [ 0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
                0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
                0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
                0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
                0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
                0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
                0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
                0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
                0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
                0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
                0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
                0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
                0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
                0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
                0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
                0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a,
    ]

    def shift_rows(input_text):
        shift_table = tf.constant([
            0, 5, 10, 15,
            4, 9, 14, 3,
            8, 13, 2, 7,
            12, 1, 6, 11,
        ], dtype=tf.int64)
        res = tf.gather(input_text, indices=shift_table, axis=1)
        return res

    def sbox_lookup(state):
        state = tf.gather(sbox, indices=state)
        return state

    def mix_column(state):

        # 0-3
        aa = tf.gather(state, indices=[0], axis=1)
        bb = tf.gather(state, indices=[1], axis=1)
        cc = tf.gather(state, indices=[2], axis=1)
        dd = tf.gather(state, indices=[3], axis=1)

        # state[0]
        a0 = tf.gather(gf_mul0, aa)
        b1 = tf.gather(gf_mul1, bb)
        ab = tf.bitwise.bitwise_xor(a0, b1)
        cd = tf.bitwise.bitwise_xor(cc, dd)
        state0 = tf.bitwise.bitwise_xor(ab, cd)

        # state[1]
        b0 = tf.gather(gf_mul0, bb)
        c1 = tf.gather(gf_mul1, cc)
        ab = tf.bitwise.bitwise_xor(aa, b0)
        cd = tf.bitwise.bitwise_xor(c1, dd)
        state1 = tf.bitwise.bitwise_xor(ab, cd)

        # state[2]
        c0 = tf.gather(gf_mul0, cc)
        d1 = tf.gather(gf_mul1, dd)
        ab = tf.bitwise.bitwise_xor(aa, bb)
        cd = tf.bitwise.bitwise_xor(c0, d1)
        state2 = tf.bitwise.bitwise_xor(ab, cd)

        # state[3]
        a1 = tf.gather(gf_mul1, aa)
        d0 = tf.gather(gf_mul0, dd)
        ab = tf.bitwise.bitwise_xor(a1, bb)
        cd = tf.bitwise.bitwise_xor(cc, d0)
        state3 = tf.bitwise.bitwise_xor(ab, cd)

        # return state3

        # 4-7
        aa = tf.gather(state, indices=[4], axis=1)
        bb = tf.gather(state, indices=[5], axis=1)
        cc = tf.gather(state, indices=[6], axis=1)
        dd = tf.gather(state, indices=[7], axis=1)

        # state[4]
        a0 = tf.gather(gf_mul0, aa)
        b1 = tf.gather(gf_mul1, bb)
        ab = tf.bitwise.bitwise_xor(a0, b1)
        cd = tf.bitwise.bitwise_xor(cc, dd)
        state4 = tf.bitwise.bitwise_xor(ab, cd)

        # state[5]
        b0 = tf.gather(gf_mul0, bb)
        c1 = tf.gather(gf_mul1, cc)
        ab = tf.bitwise.bitwise_xor(aa, b0)
        cd = tf.bitwise.bitwise_xor(c1, dd)
        state5 = tf.bitwise.bitwise_xor(ab, cd)

        # state[6]
        c0 = tf.gather(gf_mul0, cc)
        d1 = tf.gather(gf_mul1, dd)
        ab = tf.bitwise.bitwise_xor(aa, bb)
        cd = tf.bitwise.bitwise_xor(c0, d1)
        state6 = tf.bitwise.bitwise_xor(ab, cd)

        # state[7]
        a1 = tf.gather(gf_mul1, aa)
        d0 = tf.gather(gf_mul0, dd)
        ab = tf.bitwise.bitwise_xor(a1, bb)
        cd = tf.bitwise.bitwise_xor(cc, d0)
        state7 = tf.bitwise.bitwise_xor(ab, cd)

        # 8-11
        aa = tf.gather(state, indices=[8], axis=1)
        bb = tf.gather(state, indices=[9], axis=1)
        cc = tf.gather(state, indices=[10], axis=1)
        dd = tf.gather(state, indices=[11], axis=1)

        # state[8]
        a0 = tf.gather(gf_mul0, aa)
        b1 = tf.gather(gf_mul1, bb)
        ab = tf.bitwise.bitwise_xor(a0, b1)
        cd = tf.bitwise.bitwise_xor(cc, dd)
        state8 = tf.bitwise.bitwise_xor(ab, cd)

        # state[9]
        b0 = tf.gather(gf_mul0, bb)
        c1 = tf.gather(gf_mul1, cc)
        ab = tf.bitwise.bitwise_xor(aa, b0)
        cd = tf.bitwise.bitwise_xor(c1, dd)
        state9 = tf.bitwise.bitwise_xor(ab, cd)

        # state[10]
        c0 = tf.gather(gf_mul0, cc)
        d1 = tf.gather(gf_mul1, dd)
        ab = tf.bitwise.bitwise_xor(aa, bb)
        cd = tf.bitwise.bitwise_xor(c0, d1)
        state10 = tf.bitwise.bitwise_xor(ab, cd)

        # state[11]
        a1 = tf.gather(gf_mul1, aa)
        d0 = tf.gather(gf_mul0, dd)
        ab = tf.bitwise.bitwise_xor(a1, bb)
        cd = tf.bitwise.bitwise_xor(cc, d0)
        state11 = tf.bitwise.bitwise_xor(ab, cd)

        # 12-15
        aa = tf.gather(state, indices=[12], axis=1)
        bb = tf.gather(state, indices=[13], axis=1)
        cc = tf.gather(state, indices=[14], axis=1)
        dd = tf.gather(state, indices=[15], axis=1)

        # state[12]
        a0 = tf.gather(gf_mul0, aa)
        b1 = tf.gather(gf_mul1, bb)
        ab = tf.bitwise.bitwise_xor(a0, b1)
        cd = tf.bitwise.bitwise_xor(cc, dd)
        state12 = tf.bitwise.bitwise_xor(ab, cd)

        # state[13]
        b0 = tf.gather(gf_mul0, bb)
        c1 = tf.gather(gf_mul1, cc)
        ab = tf.bitwise.bitwise_xor(aa, b0)
        cd = tf.bitwise.bitwise_xor(c1, dd)
        state13 = tf.bitwise.bitwise_xor(ab, cd)

        # state[14]
        c0 = tf.gather(gf_mul0, cc)
        d1 = tf.gather(gf_mul1, dd)
        ab = tf.bitwise.bitwise_xor(aa, bb)
        cd = tf.bitwise.bitwise_xor(c0, d1)
        state14 = tf.bitwise.bitwise_xor(ab, cd)

        # state[15]
        a1 = tf.gather(gf_mul1, aa)
        d0 = tf.gather(gf_mul0, dd)
        ab = tf.bitwise.bitwise_xor(a1, bb)
        cd = tf.bitwise.bitwise_xor(cc, d0)
        state15 = tf.bitwise.bitwise_xor(ab, cd)

        state = tf.concat(values=[state0, state1, state2, state3,
                                  state4, state5, state6, state7,
                                  state8, state9, state10, state11,
                                  state12, state13, state14, state15], axis=1)
        return state

    def add_round_key(state, key):
        state = tf.bitwise.bitwise_xor(state, key)
        return state

    key = tf.slice(round_key, begin=[0], size=[16])
    state = add_round_key(plaintext, key)

    for i in range(Nr-1):
        state = sbox_lookup(state)
        state = shift_rows(state)
        state = mix_column(state)
        key = tf.slice(round_key, begin=[(i+1)*16], size=[16])
        state = add_round_key(state, key)
    state = sbox_lookup(state)
    state = shift_rows(state)
    key = tf.slice(round_key, begin=[10 * 16], size=[16])
    state = add_round_key(state, key)
    return state

    # def key_expansion(key, num_round):
    #     key = tf.reshape(key, shape=(4, 4))
    #
    #     tmp = tf.constant([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
    #                              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
    #                              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
    #                              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]],
    #                             dtype=tf.int32)
    #     # key = tf.transpose(key)
    #     round_key = tf.concat((key, tmp), axis=1)
    #     round_key = tf.transpose(round_key)
    #     Rcon = (
    #         0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    #         0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    #         0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    #         0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
    #     )
    #     for i in range(0, num_round):


        # return round_key

class Cipher(tf.Module):

    def __init__(self):
        super(Cipher, self).__init__()

    @tf.function(input_signature=[tf.TensorSpec(shape=(None, 16), dtype=tf.int32),
                                  tf.TensorSpec(shape=(176,), dtype=tf.int32)])
    def __call__(self, plaintext, round_keys):
        Nr = 10
        sbox = [
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
            0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
            0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
            0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
            0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
        ]

        gf_mul0 = [0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
                   0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
                   0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
                   0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
                   0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
                   0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
                   0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
                   0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
                   0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
                   0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
                   0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
                   0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
                   0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
                   0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
                   0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
                   0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5,
                   ]

        gf_mul1 = [0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
                   0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
                   0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
                   0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
                   0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
                   0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
                   0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
                   0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
                   0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
                   0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
                   0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
                   0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
                   0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
                   0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
                   0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
                   0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a,
                   ]

        def shift_rows(input_text):
            shift_table = tf.constant([
                0, 5, 10, 15,
                4, 9, 14, 3,
                8, 13, 2, 7,
                12, 1, 6, 11,
            ], dtype=tf.int64)
            res = tf.gather(input_text, indices=shift_table, axis=1)
            return res

        def sbox_lookup(state):
            state = tf.gather(sbox, indices=state)
            return state

        def mix_column(state):
            # 0-3
            aa = tf.gather(state, indices=[0], axis=1)
            bb = tf.gather(state, indices=[1], axis=1)
            cc = tf.gather(state, indices=[2], axis=1)
            dd = tf.gather(state, indices=[3], axis=1)

            # state[0]
            a0 = tf.gather(gf_mul0, aa)
            b1 = tf.gather(gf_mul1, bb)
            ab = tf.bitwise.bitwise_xor(a0, b1)
            cd = tf.bitwise.bitwise_xor(cc, dd)
            state0 = tf.bitwise.bitwise_xor(ab, cd)

            # state[1]
            b0 = tf.gather(gf_mul0, bb)
            c1 = tf.gather(gf_mul1, cc)
            ab = tf.bitwise.bitwise_xor(aa, b0)
            cd = tf.bitwise.bitwise_xor(c1, dd)
            state1 = tf.bitwise.bitwise_xor(ab, cd)

            # state[2]
            c0 = tf.gather(gf_mul0, cc)
            d1 = tf.gather(gf_mul1, dd)
            ab = tf.bitwise.bitwise_xor(aa, bb)
            cd = tf.bitwise.bitwise_xor(c0, d1)
            state2 = tf.bitwise.bitwise_xor(ab, cd)

            # state[3]
            a1 = tf.gather(gf_mul1, aa)
            d0 = tf.gather(gf_mul0, dd)
            ab = tf.bitwise.bitwise_xor(a1, bb)
            cd = tf.bitwise.bitwise_xor(cc, d0)
            state3 = tf.bitwise.bitwise_xor(ab, cd)

            # return state3

            # 4-7
            aa = tf.gather(state, indices=[4], axis=1)
            bb = tf.gather(state, indices=[5], axis=1)
            cc = tf.gather(state, indices=[6], axis=1)
            dd = tf.gather(state, indices=[7], axis=1)

            # state[4]
            a0 = tf.gather(gf_mul0, aa)
            b1 = tf.gather(gf_mul1, bb)
            ab = tf.bitwise.bitwise_xor(a0, b1)
            cd = tf.bitwise.bitwise_xor(cc, dd)
            state4 = tf.bitwise.bitwise_xor(ab, cd)

            # state[5]
            b0 = tf.gather(gf_mul0, bb)
            c1 = tf.gather(gf_mul1, cc)
            ab = tf.bitwise.bitwise_xor(aa, b0)
            cd = tf.bitwise.bitwise_xor(c1, dd)
            state5 = tf.bitwise.bitwise_xor(ab, cd)

            # state[6]
            c0 = tf.gather(gf_mul0, cc)
            d1 = tf.gather(gf_mul1, dd)
            ab = tf.bitwise.bitwise_xor(aa, bb)
            cd = tf.bitwise.bitwise_xor(c0, d1)
            state6 = tf.bitwise.bitwise_xor(ab, cd)

            # state[7]
            a1 = tf.gather(gf_mul1, aa)
            d0 = tf.gather(gf_mul0, dd)
            ab = tf.bitwise.bitwise_xor(a1, bb)
            cd = tf.bitwise.bitwise_xor(cc, d0)
            state7 = tf.bitwise.bitwise_xor(ab, cd)

            # 8-11
            aa = tf.gather(state, indices=[8], axis=1)
            bb = tf.gather(state, indices=[9], axis=1)
            cc = tf.gather(state, indices=[10], axis=1)
            dd = tf.gather(state, indices=[11], axis=1)

            # state[8]
            a0 = tf.gather(gf_mul0, aa)
            b1 = tf.gather(gf_mul1, bb)
            ab = tf.bitwise.bitwise_xor(a0, b1)
            cd = tf.bitwise.bitwise_xor(cc, dd)
            state8 = tf.bitwise.bitwise_xor(ab, cd)

            # state[9]
            b0 = tf.gather(gf_mul0, bb)
            c1 = tf.gather(gf_mul1, cc)
            ab = tf.bitwise.bitwise_xor(aa, b0)
            cd = tf.bitwise.bitwise_xor(c1, dd)
            state9 = tf.bitwise.bitwise_xor(ab, cd)

            # state[10]
            c0 = tf.gather(gf_mul0, cc)
            d1 = tf.gather(gf_mul1, dd)
            ab = tf.bitwise.bitwise_xor(aa, bb)
            cd = tf.bitwise.bitwise_xor(c0, d1)
            state10 = tf.bitwise.bitwise_xor(ab, cd)

            # state[11]
            a1 = tf.gather(gf_mul1, aa)
            d0 = tf.gather(gf_mul0, dd)
            ab = tf.bitwise.bitwise_xor(a1, bb)
            cd = tf.bitwise.bitwise_xor(cc, d0)
            state11 = tf.bitwise.bitwise_xor(ab, cd)

            # 12-15
            aa = tf.gather(state, indices=[12], axis=1)
            bb = tf.gather(state, indices=[13], axis=1)
            cc = tf.gather(state, indices=[14], axis=1)
            dd = tf.gather(state, indices=[15], axis=1)

            # state[12]
            a0 = tf.gather(gf_mul0, aa)
            b1 = tf.gather(gf_mul1, bb)
            ab = tf.bitwise.bitwise_xor(a0, b1)
            cd = tf.bitwise.bitwise_xor(cc, dd)
            state12 = tf.bitwise.bitwise_xor(ab, cd)

            # state[13]
            b0 = tf.gather(gf_mul0, bb)
            c1 = tf.gather(gf_mul1, cc)
            ab = tf.bitwise.bitwise_xor(aa, b0)
            cd = tf.bitwise.bitwise_xor(c1, dd)
            state13 = tf.bitwise.bitwise_xor(ab, cd)

            # state[14]
            c0 = tf.gather(gf_mul0, cc)
            d1 = tf.gather(gf_mul1, dd)
            ab = tf.bitwise.bitwise_xor(aa, bb)
            cd = tf.bitwise.bitwise_xor(c0, d1)
            state14 = tf.bitwise.bitwise_xor(ab, cd)

            # state[15]
            a1 = tf.gather(gf_mul1, aa)
            d0 = tf.gather(gf_mul0, dd)
            ab = tf.bitwise.bitwise_xor(a1, bb)
            cd = tf.bitwise.bitwise_xor(cc, d0)
            state15 = tf.bitwise.bitwise_xor(ab, cd)

            state = tf.concat(values=[state0, state1, state2, state3,
                                      state4, state5, state6, state7,
                                      state8, state9, state10, state11,
                                      state12, state13, state14, state15], axis=1)
            return state

        def add_round_key(state, key):
            state = tf.bitwise.bitwise_xor(state, key)
            return state

        def cipher(plaintext, round_key):

            key = tf.slice(round_key, begin=[0], size=[16])
            state = add_round_key(plaintext, key)

            for i in range(Nr - 1):
                state = sbox_lookup(state)
                state = shift_rows(state)
                state = mix_column(state)
                key = tf.slice(round_key, begin=[(i + 1) * 16], size=[16])
                state = add_round_key(state, key)
            state = sbox_lookup(state)
            state = shift_rows(state)
            key = tf.slice(round_key, begin=[10 * 16], size=[16])
            state = add_round_key(state, key)
            return state

        return cipher(plaintext, round_keys)

gf_mul = [
      [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], [ 0x02, 0x03, 0x09, 0x0b, 0x0d, 0x0e ],
      [ 0x04, 0x06, 0x12, 0x16, 0x1a, 0x1c ], [ 0x06, 0x05, 0x1b, 0x1d, 0x17, 0x12 ],
      [ 0x08, 0x0c, 0x24, 0x2c, 0x34, 0x38 ], [ 0x0a, 0x0f, 0x2d, 0x27, 0x39, 0x36 ],
      [ 0x0c, 0x0a, 0x36, 0x3a, 0x2e, 0x24 ], [ 0x0e, 0x09, 0x3f, 0x31, 0x23, 0x2a ],
      [ 0x10, 0x18, 0x48, 0x58, 0x68, 0x70 ], [ 0x12, 0x1b, 0x41, 0x53, 0x65, 0x7e ],
      [ 0x14, 0x1e, 0x5a, 0x4e, 0x72, 0x6c ], [ 0x16, 0x1d, 0x53, 0x45, 0x7f, 0x62 ],
      [ 0x18, 0x14, 0x6c, 0x74, 0x5c, 0x48 ], [ 0x1a, 0x17, 0x65, 0x7f, 0x51, 0x46 ],
      [ 0x1c, 0x12, 0x7e, 0x62, 0x46, 0x54 ], [ 0x1e, 0x11, 0x77, 0x69, 0x4b, 0x5a ],
      [ 0x20, 0x30, 0x90, 0xb0, 0xd0, 0xe0 ], [ 0x22, 0x33, 0x99, 0xbb, 0xdd, 0xee ],
      [ 0x24, 0x36, 0x82, 0xa6, 0xca, 0xfc ], [ 0x26, 0x35, 0x8b, 0xad, 0xc7, 0xf2 ],
      [ 0x28, 0x3c, 0xb4, 0x9c, 0xe4, 0xd8 ], [ 0x2a, 0x3f, 0xbd, 0x97, 0xe9, 0xd6 ],
      [ 0x2c, 0x3a, 0xa6, 0x8a, 0xfe, 0xc4 ], [ 0x2e, 0x39, 0xaf, 0x81, 0xf3, 0xca ],
      [ 0x30, 0x28, 0xd8, 0xe8, 0xb8, 0x90 ], [ 0x32, 0x2b, 0xd1, 0xe3, 0xb5, 0x9e ],
      [ 0x34, 0x2e, 0xca, 0xfe, 0xa2, 0x8c ], [ 0x36, 0x2d, 0xc3, 0xf5, 0xaf, 0x82 ],
      [ 0x38, 0x24, 0xfc, 0xc4, 0x8c, 0xa8 ], [ 0x3a, 0x27, 0xf5, 0xcf, 0x81, 0xa6 ],
      [ 0x3c, 0x22, 0xee, 0xd2, 0x96, 0xb4 ], [ 0x3e, 0x21, 0xe7, 0xd9, 0x9b, 0xba ],
      [ 0x40, 0x60, 0x3b, 0x7b, 0xbb, 0xdb ], [ 0x42, 0x63, 0x32, 0x70, 0xb6, 0xd5 ],
      [ 0x44, 0x66, 0x29, 0x6d, 0xa1, 0xc7 ], [ 0x46, 0x65, 0x20, 0x66, 0xac, 0xc9 ],
      [ 0x48, 0x6c, 0x1f, 0x57, 0x8f, 0xe3 ], [ 0x4a, 0x6f, 0x16, 0x5c, 0x82, 0xed ],
      [ 0x4c, 0x6a, 0x0d, 0x41, 0x95, 0xff ], [ 0x4e, 0x69, 0x04, 0x4a, 0x98, 0xf1 ],
      [ 0x50, 0x78, 0x73, 0x23, 0xd3, 0xab ], [ 0x52, 0x7b, 0x7a, 0x28, 0xde, 0xa5 ],
      [ 0x54, 0x7e, 0x61, 0x35, 0xc9, 0xb7 ], [ 0x56, 0x7d, 0x68, 0x3e, 0xc4, 0xb9 ],
      [ 0x58, 0x74, 0x57, 0x0f, 0xe7, 0x93 ], [ 0x5a, 0x77, 0x5e, 0x04, 0xea, 0x9d ],
      [ 0x5c, 0x72, 0x45, 0x19, 0xfd, 0x8f ], [ 0x5e, 0x71, 0x4c, 0x12, 0xf0, 0x81 ],
      [ 0x60, 0x50, 0xab, 0xcb, 0x6b, 0x3b ], [ 0x62, 0x53, 0xa2, 0xc0, 0x66, 0x35 ],
      [ 0x64, 0x56, 0xb9, 0xdd, 0x71, 0x27 ], [ 0x66, 0x55, 0xb0, 0xd6, 0x7c, 0x29 ],
      [ 0x68, 0x5c, 0x8f, 0xe7, 0x5f, 0x03 ], [ 0x6a, 0x5f, 0x86, 0xec, 0x52, 0x0d ],
      [ 0x6c, 0x5a, 0x9d, 0xf1, 0x45, 0x1f ], [ 0x6e, 0x59, 0x94, 0xfa, 0x48, 0x11 ],
      [ 0x70, 0x48, 0xe3, 0x93, 0x03, 0x4b ], [ 0x72, 0x4b, 0xea, 0x98, 0x0e, 0x45 ],
      [ 0x74, 0x4e, 0xf1, 0x85, 0x19, 0x57 ], [ 0x76, 0x4d, 0xf8, 0x8e, 0x14, 0x59 ],
      [ 0x78, 0x44, 0xc7, 0xbf, 0x37, 0x73 ], [ 0x7a, 0x47, 0xce, 0xb4, 0x3a, 0x7d ],
      [ 0x7c, 0x42, 0xd5, 0xa9, 0x2d, 0x6f ], [ 0x7e, 0x41, 0xdc, 0xa2, 0x20, 0x61 ],
      [ 0x80, 0xc0, 0x76, 0xf6, 0x6d, 0xad ], [ 0x82, 0xc3, 0x7f, 0xfd, 0x60, 0xa3 ],
      [ 0x84, 0xc6, 0x64, 0xe0, 0x77, 0xb1 ], [ 0x86, 0xc5, 0x6d, 0xeb, 0x7a, 0xbf ],
      [ 0x88, 0xcc, 0x52, 0xda, 0x59, 0x95 ], [ 0x8a, 0xcf, 0x5b, 0xd1, 0x54, 0x9b ],
      [ 0x8c, 0xca, 0x40, 0xcc, 0x43, 0x89 ], [ 0x8e, 0xc9, 0x49, 0xc7, 0x4e, 0x87 ],
      [ 0x90, 0xd8, 0x3e, 0xae, 0x05, 0xdd ], [ 0x92, 0xdb, 0x37, 0xa5, 0x08, 0xd3 ],
      [ 0x94, 0xde, 0x2c, 0xb8, 0x1f, 0xc1 ], [ 0x96, 0xdd, 0x25, 0xb3, 0x12, 0xcf ],
      [ 0x98, 0xd4, 0x1a, 0x82, 0x31, 0xe5 ], [ 0x9a, 0xd7, 0x13, 0x89, 0x3c, 0xeb ],
      [ 0x9c, 0xd2, 0x08, 0x94, 0x2b, 0xf9 ], [ 0x9e, 0xd1, 0x01, 0x9f, 0x26, 0xf7 ],
      [ 0xa0, 0xf0, 0xe6, 0x46, 0xbd, 0x4d ], [ 0xa2, 0xf3, 0xef, 0x4d, 0xb0, 0x43 ],
      [ 0xa4, 0xf6, 0xf4, 0x50, 0xa7, 0x51 ], [ 0xa6, 0xf5, 0xfd, 0x5b, 0xaa, 0x5f ],
      [ 0xa8, 0xfc, 0xc2, 0x6a, 0x89, 0x75 ], [ 0xaa, 0xff, 0xcb, 0x61, 0x84, 0x7b ],
      [ 0xac, 0xfa, 0xd0, 0x7c, 0x93, 0x69 ], [ 0xae, 0xf9, 0xd9, 0x77, 0x9e, 0x67 ],
      [ 0xb0, 0xe8, 0xae, 0x1e, 0xd5, 0x3d ], [ 0xb2, 0xeb, 0xa7, 0x15, 0xd8, 0x33 ],
      [ 0xb4, 0xee, 0xbc, 0x08, 0xcf, 0x21 ], [ 0xb6, 0xed, 0xb5, 0x03, 0xc2, 0x2f ],
      [ 0xb8, 0xe4, 0x8a, 0x32, 0xe1, 0x05 ], [ 0xba, 0xe7, 0x83, 0x39, 0xec, 0x0b ],
      [ 0xbc, 0xe2, 0x98, 0x24, 0xfb, 0x19 ], [ 0xbe, 0xe1, 0x91, 0x2f, 0xf6, 0x17 ],
      [ 0xc0, 0xa0, 0x4d, 0x8d, 0xd6, 0x76 ], [ 0xc2, 0xa3, 0x44, 0x86, 0xdb, 0x78 ],
      [ 0xc4, 0xa6, 0x5f, 0x9b, 0xcc, 0x6a ], [ 0xc6, 0xa5, 0x56, 0x90, 0xc1, 0x64 ],
      [ 0xc8, 0xac, 0x69, 0xa1, 0xe2, 0x4e ], [ 0xca, 0xaf, 0x60, 0xaa, 0xef, 0x40 ],
      [ 0xcc, 0xaa, 0x7b, 0xb7, 0xf8, 0x52 ], [ 0xce, 0xa9, 0x72, 0xbc, 0xf5, 0x5c ],
      [ 0xd0, 0xb8, 0x05, 0xd5, 0xbe, 0x06 ], [ 0xd2, 0xbb, 0x0c, 0xde, 0xb3, 0x08 ],
      [ 0xd4, 0xbe, 0x17, 0xc3, 0xa4, 0x1a ], [ 0xd6, 0xbd, 0x1e, 0xc8, 0xa9, 0x14 ],
      [ 0xd8, 0xb4, 0x21, 0xf9, 0x8a, 0x3e ], [ 0xda, 0xb7, 0x28, 0xf2, 0x87, 0x30 ],
      [ 0xdc, 0xb2, 0x33, 0xef, 0x90, 0x22 ], [ 0xde, 0xb1, 0x3a, 0xe4, 0x9d, 0x2c ],
      [ 0xe0, 0x90, 0xdd, 0x3d, 0x06, 0x96 ], [ 0xe2, 0x93, 0xd4, 0x36, 0x0b, 0x98 ],
      [ 0xe4, 0x96, 0xcf, 0x2b, 0x1c, 0x8a ], [ 0xe6, 0x95, 0xc6, 0x20, 0x11, 0x84 ],
      [ 0xe8, 0x9c, 0xf9, 0x11, 0x32, 0xae ], [ 0xea, 0x9f, 0xf0, 0x1a, 0x3f, 0xa0 ],
      [ 0xec, 0x9a, 0xeb, 0x07, 0x28, 0xb2 ], [ 0xee, 0x99, 0xe2, 0x0c, 0x25, 0xbc ],
      [ 0xf0, 0x88, 0x95, 0x65, 0x6e, 0xe6 ], [ 0xf2, 0x8b, 0x9c, 0x6e, 0x63, 0xe8 ],
      [ 0xf4, 0x8e, 0x87, 0x73, 0x74, 0xfa ], [ 0xf6, 0x8d, 0x8e, 0x78, 0x79, 0xf4 ],
      [ 0xf8, 0x84, 0xb1, 0x49, 0x5a, 0xde ], [ 0xfa, 0x87, 0xb8, 0x42, 0x57, 0xd0 ],
      [ 0xfc, 0x82, 0xa3, 0x5f, 0x40, 0xc2 ], [ 0xfe, 0x81, 0xaa, 0x54, 0x4d, 0xcc ],
      [ 0x1b, 0x9b, 0xec, 0xf7, 0xda, 0x41 ], [ 0x19, 0x98, 0xe5, 0xfc, 0xd7, 0x4f ],
      [ 0x1f, 0x9d, 0xfe, 0xe1, 0xc0, 0x5d ], [ 0x1d, 0x9e, 0xf7, 0xea, 0xcd, 0x53 ],
      [ 0x13, 0x97, 0xc8, 0xdb, 0xee, 0x79 ], [ 0x11, 0x94, 0xc1, 0xd0, 0xe3, 0x77 ],
      [ 0x17, 0x91, 0xda, 0xcd, 0xf4, 0x65 ], [ 0x15, 0x92, 0xd3, 0xc6, 0xf9, 0x6b ],
      [ 0x0b, 0x83, 0xa4, 0xaf, 0xb2, 0x31 ], [ 0x09, 0x80, 0xad, 0xa4, 0xbf, 0x3f ],
      [ 0x0f, 0x85, 0xb6, 0xb9, 0xa8, 0x2d ], [ 0x0d, 0x86, 0xbf, 0xb2, 0xa5, 0x23 ],
      [ 0x03, 0x8f, 0x80, 0x83, 0x86, 0x09 ], [ 0x01, 0x8c, 0x89, 0x88, 0x8b, 0x07 ],
      [ 0x07, 0x89, 0x92, 0x95, 0x9c, 0x15 ], [ 0x05, 0x8a, 0x9b, 0x9e, 0x91, 0x1b ],
      [ 0x3b, 0xab, 0x7c, 0x47, 0x0a, 0xa1 ], [ 0x39, 0xa8, 0x75, 0x4c, 0x07, 0xaf ],
      [ 0x3f, 0xad, 0x6e, 0x51, 0x10, 0xbd ], [ 0x3d, 0xae, 0x67, 0x5a, 0x1d, 0xb3 ],
      [ 0x33, 0xa7, 0x58, 0x6b, 0x3e, 0x99 ], [ 0x31, 0xa4, 0x51, 0x60, 0x33, 0x97 ],
      [ 0x37, 0xa1, 0x4a, 0x7d, 0x24, 0x85 ], [ 0x35, 0xa2, 0x43, 0x76, 0x29, 0x8b ],
      [ 0x2b, 0xb3, 0x34, 0x1f, 0x62, 0xd1 ], [ 0x29, 0xb0, 0x3d, 0x14, 0x6f, 0xdf ],
      [ 0x2f, 0xb5, 0x26, 0x09, 0x78, 0xcd ], [ 0x2d, 0xb6, 0x2f, 0x02, 0x75, 0xc3 ],
      [ 0x23, 0xbf, 0x10, 0x33, 0x56, 0xe9 ], [ 0x21, 0xbc, 0x19, 0x38, 0x5b, 0xe7 ],
      [ 0x27, 0xb9, 0x02, 0x25, 0x4c, 0xf5 ], [ 0x25, 0xba, 0x0b, 0x2e, 0x41, 0xfb ],
      [ 0x5b, 0xfb, 0xd7, 0x8c, 0x61, 0x9a ], [ 0x59, 0xf8, 0xde, 0x87, 0x6c, 0x94 ],
      [ 0x5f, 0xfd, 0xc5, 0x9a, 0x7b, 0x86 ], [ 0x5d, 0xfe, 0xcc, 0x91, 0x76, 0x88 ],
      [ 0x53, 0xf7, 0xf3, 0xa0, 0x55, 0xa2 ], [ 0x51, 0xf4, 0xfa, 0xab, 0x58, 0xac ],
      [ 0x57, 0xf1, 0xe1, 0xb6, 0x4f, 0xbe ], [ 0x55, 0xf2, 0xe8, 0xbd, 0x42, 0xb0 ],
      [ 0x4b, 0xe3, 0x9f, 0xd4, 0x09, 0xea ], [ 0x49, 0xe0, 0x96, 0xdf, 0x04, 0xe4 ],
      [ 0x4f, 0xe5, 0x8d, 0xc2, 0x13, 0xf6 ], [ 0x4d, 0xe6, 0x84, 0xc9, 0x1e, 0xf8 ],
      [ 0x43, 0xef, 0xbb, 0xf8, 0x3d, 0xd2 ], [ 0x41, 0xec, 0xb2, 0xf3, 0x30, 0xdc ],
      [ 0x47, 0xe9, 0xa9, 0xee, 0x27, 0xce ], [ 0x45, 0xea, 0xa0, 0xe5, 0x2a, 0xc0 ],
      [ 0x7b, 0xcb, 0x47, 0x3c, 0xb1, 0x7a ], [ 0x79, 0xc8, 0x4e, 0x37, 0xbc, 0x74 ],
      [ 0x7f, 0xcd, 0x55, 0x2a, 0xab, 0x66 ], [ 0x7d, 0xce, 0x5c, 0x21, 0xa6, 0x68 ],
      [ 0x73, 0xc7, 0x63, 0x10, 0x85, 0x42 ], [ 0x71, 0xc4, 0x6a, 0x1b, 0x88, 0x4c ],
      [ 0x77, 0xc1, 0x71, 0x06, 0x9f, 0x5e ], [ 0x75, 0xc2, 0x78, 0x0d, 0x92, 0x50 ],
      [ 0x6b, 0xd3, 0x0f, 0x64, 0xd9, 0x0a ], [ 0x69, 0xd0, 0x06, 0x6f, 0xd4, 0x04 ],
      [ 0x6f, 0xd5, 0x1d, 0x72, 0xc3, 0x16 ], [ 0x6d, 0xd6, 0x14, 0x79, 0xce, 0x18 ],
      [ 0x63, 0xdf, 0x2b, 0x48, 0xed, 0x32 ], [ 0x61, 0xdc, 0x22, 0x43, 0xe0, 0x3c ],
      [ 0x67, 0xd9, 0x39, 0x5e, 0xf7, 0x2e ], [ 0x65, 0xda, 0x30, 0x55, 0xfa, 0x20 ],
      [ 0x9b, 0x5b, 0x9a, 0x01, 0xb7, 0xec ], [ 0x99, 0x58, 0x93, 0x0a, 0xba, 0xe2 ],
      [ 0x9f, 0x5d, 0x88, 0x17, 0xad, 0xf0 ], [ 0x9d, 0x5e, 0x81, 0x1c, 0xa0, 0xfe ],
      [ 0x93, 0x57, 0xbe, 0x2d, 0x83, 0xd4 ], [ 0x91, 0x54, 0xb7, 0x26, 0x8e, 0xda ],
      [ 0x97, 0x51, 0xac, 0x3b, 0x99, 0xc8 ], [ 0x95, 0x52, 0xa5, 0x30, 0x94, 0xc6 ],
      [ 0x8b, 0x43, 0xd2, 0x59, 0xdf, 0x9c ], [ 0x89, 0x40, 0xdb, 0x52, 0xd2, 0x92 ],
      [ 0x8f, 0x45, 0xc0, 0x4f, 0xc5, 0x80 ], [ 0x8d, 0x46, 0xc9, 0x44, 0xc8, 0x8e ],
      [ 0x83, 0x4f, 0xf6, 0x75, 0xeb, 0xa4 ], [ 0x81, 0x4c, 0xff, 0x7e, 0xe6, 0xaa ],
      [ 0x87, 0x49, 0xe4, 0x63, 0xf1, 0xb8 ], [ 0x85, 0x4a, 0xed, 0x68, 0xfc, 0xb6 ],
      [ 0xbb, 0x6b, 0x0a, 0xb1, 0x67, 0x0c ], [ 0xb9, 0x68, 0x03, 0xba, 0x6a, 0x02 ],
      [ 0xbf, 0x6d, 0x18, 0xa7, 0x7d, 0x10 ], [ 0xbd, 0x6e, 0x11, 0xac, 0x70, 0x1e ],
      [ 0xb3, 0x67, 0x2e, 0x9d, 0x53, 0x34 ], [ 0xb1, 0x64, 0x27, 0x96, 0x5e, 0x3a ],
      [ 0xb7, 0x61, 0x3c, 0x8b, 0x49, 0x28 ], [ 0xb5, 0x62, 0x35, 0x80, 0x44, 0x26 ],
      [ 0xab, 0x73, 0x42, 0xe9, 0x0f, 0x7c ], [ 0xa9, 0x70, 0x4b, 0xe2, 0x02, 0x72 ],
      [ 0xaf, 0x75, 0x50, 0xff, 0x15, 0x60 ], [ 0xad, 0x76, 0x59, 0xf4, 0x18, 0x6e ],
      [ 0xa3, 0x7f, 0x66, 0xc5, 0x3b, 0x44 ], [ 0xa1, 0x7c, 0x6f, 0xce, 0x36, 0x4a ],
      [ 0xa7, 0x79, 0x74, 0xd3, 0x21, 0x58 ], [ 0xa5, 0x7a, 0x7d, 0xd8, 0x2c, 0x56 ],
      [ 0xdb, 0x3b, 0xa1, 0x7a, 0x0c, 0x37 ], [ 0xd9, 0x38, 0xa8, 0x71, 0x01, 0x39 ],
      [ 0xdf, 0x3d, 0xb3, 0x6c, 0x16, 0x2b ], [ 0xdd, 0x3e, 0xba, 0x67, 0x1b, 0x25 ],
      [ 0xd3, 0x37, 0x85, 0x56, 0x38, 0x0f ], [ 0xd1, 0x34, 0x8c, 0x5d, 0x35, 0x01 ],
      [ 0xd7, 0x31, 0x97, 0x40, 0x22, 0x13 ], [ 0xd5, 0x32, 0x9e, 0x4b, 0x2f, 0x1d ],
      [ 0xcb, 0x23, 0xe9, 0x22, 0x64, 0x47 ], [ 0xc9, 0x20, 0xe0, 0x29, 0x69, 0x49 ],
      [ 0xcf, 0x25, 0xfb, 0x34, 0x7e, 0x5b ], [ 0xcd, 0x26, 0xf2, 0x3f, 0x73, 0x55 ],
      [ 0xc3, 0x2f, 0xcd, 0x0e, 0x50, 0x7f ], [ 0xc1, 0x2c, 0xc4, 0x05, 0x5d, 0x71 ],
      [ 0xc7, 0x29, 0xdf, 0x18, 0x4a, 0x63 ], [ 0xc5, 0x2a, 0xd6, 0x13, 0x47, 0x6d ],
      [ 0xfb, 0x0b, 0x31, 0xca, 0xdc, 0xd7 ], [ 0xf9, 0x08, 0x38, 0xc1, 0xd1, 0xd9 ],
      [ 0xff, 0x0d, 0x23, 0xdc, 0xc6, 0xcb ], [ 0xfd, 0x0e, 0x2a, 0xd7, 0xcb, 0xc5 ],
      [ 0xf3, 0x07, 0x15, 0xe6, 0xe8, 0xef ], [ 0xf1, 0x04, 0x1c, 0xed, 0xe5, 0xe1 ],
      [ 0xf7, 0x01, 0x07, 0xf0, 0xf2, 0xf3 ], [ 0xf5, 0x02, 0x0e, 0xfb, 0xff, 0xfd ],
      [ 0xeb, 0x13, 0x79, 0x92, 0xb4, 0xa7 ], [ 0xe9, 0x10, 0x70, 0x99, 0xb9, 0xa9 ],
      [ 0xef, 0x15, 0x6b, 0x84, 0xae, 0xbb ], [ 0xed, 0x16, 0x62, 0x8f, 0xa3, 0xb5 ],
      [ 0xe3, 0x1f, 0x5d, 0xbe, 0x80, 0x9f ], [ 0xe1, 0x1c, 0x54, 0xb5, 0x8d, 0x91 ],
      [ 0xe7, 0x19, 0x4f, 0xa8, 0x9a, 0x83 ], [ 0xe5, 0x1a, 0x46, 0xa3, 0x97, 0x8d ]
    ]

def get_target_gf_mul(target=0):
    res = []
    for i in range(256):
        res.append(gf_mul[i][target])
    # print(res)
    result = ""
    # print('[')
    result += '['
    for i in range(256):
        result += '0x{:02x}, '.format(res[i])
        if (i+1) % 16 == 0:
            result += '\n'
    result += ']'
    print(result)

def simple_test():
    plaintext = '6bc1bee22e409f96e93d7e117393172a'
    plaintext = text2vector(plaintext)
    block_num = 10
    plaintext = plaintext * block_num
    plaintext = tf.constant(plaintext, dtype=tf.int32)
    plaintext = tf.reshape(plaintext, shape=(block_num, 16))

    length = tf.constant(plaintext.shape[0], dtype=tf.int32)

    key = '2b7e151628aed2a6abf7158809cf4f3c'
    key = text2vector(key)
    round_keys = key_expansion(key)
    round_keys = tf.constant(round_keys, dtype=tf.int32)

    # res = encrypt(plaintext, round_keys)
    cipher = Cipher()
    res = cipher(plaintext, round_keys)
    print(res)

def save_to_model():

    cipher = Cipher()
    # print(module(10))
    tf.saved_model.save(cipher, model_path)

def inference():
    plaintext = '6bc1bee22e409f96e93d7e117393172a'
    plaintext = text2vector(plaintext)
    block_num = 10
    plaintext = plaintext * block_num
    plaintext = tf.constant(plaintext, dtype=tf.int32)
    plaintext = tf.reshape(plaintext, shape=(block_num, 16))

    length = tf.constant(plaintext.shape[0], dtype=tf.int32)

    key = '000102030405060708090a0b0c0d0e0f'
    key = text2vector(key)
    round_keys = key_expansion(key, 12)
    round_keys = tf.constant(round_keys, dtype=tf.int32)

    # load model
    start_time = time.time()
    cipher = tf.saved_model.load(model_path)
    model_load_time = time.time() - start_time
    res = cipher(plaintext, round_keys)
    inference_time = time.time() - start_time - model_load_time

    # print(cipher())
    print("tflite model outputs: ", res)
    print("\t model load time used:", model_load_time)
    print('\t inference time used:', inference_time)

sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ]

Rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141]

def SubWord(word):
    return [sbox[byte] for byte in word]

def RotWord(word):
    return word[1:] + word[0:1]

def process_key(key, Nk=4):
    try:
        key = key.replace(" ", "")
        return [[int(key[i*8+j*2:i*8+j*2+2], 16) for j in range(4)]
                for i in range(Nk)]
    except:
        print ("Password must be hexadecimal.")
        return

def KeyExpansion(key, Nb=4, Nk=4, Nr=10):
    w = []
    for word in key:
        w.append(word[:])

    i = Nk

    while i < Nb * (Nr + 1):
        temp = w[i-1][:]
        if i % Nk == 0:
            temp = SubWord(RotWord(temp))
            temp[0] ^= Rcon[(i//Nk)]
        elif Nk > 6 and i % Nk == 4:
            temp = SubWord(temp)

        for j in range(len(temp)):
            temp[j] ^= w[i-Nk][j]

        w.append(temp[:])

        i += 1

    return w

if __name__ == '__main__':
    # simple_test()
    # save_to_model()
    # inference()
    # key = [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 44, 32, 110, 105, 99]
    # round_key = key_expansion(key)
    # print(round_key)
    # get_target_gf_mul(target=1)
    # print("Rcon size:", len(Rcon))
    Nb = 4
    Nk = 4
    Nr = 12
    key = "000102030405060708090a0b0c0d0e0f"
    print("KEY:\t\t{0}".format(key))
    key = process_key(key, Nk)
    expanded_key = KeyExpansion(key, Nb, Nk, Nr)
    print(len(expanded_key), expanded_key)

    inference()